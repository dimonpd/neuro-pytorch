import torch
import torch.nn as nn

# здесь объявляйте класс модели
class MyModelRNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.gru = nn.GRU(2, 5, batch_first=True, bidirectional=True, bias=False)
        self.mb = nn.BatchNorm1d(10)
        self.output = nn.Linear(10, 4)

    def forward(self, x):
        y, _ = self.gru(x)
        n = y.size(1)
        out = torch.empty(y.size(0), n, self.output.out_features)

        for i in range(n):
            out[:, i, :] = self.output(self.mb(y[:, i, :]))
        return out
    

# тензор x в программе не менять
batch_size = 3
seq_length = 17
d_size = 2
x = torch.rand(batch_size, d_size)

# здесь продолжайте программу
model = MyModelRNN()
model.eval()

u = torch.zeros(batch_size, seq_length, d_size)
u[:, 0, :] = x
predict = model(u)
