import torch
import torch.nn as nn

class AutoEncoder(nn.Module):
    def __init__(self):
        super().__init__()
        self.encoder = nn.Sequential(
            nn.Conv2d(3, 8, 3, stride=2, padding=1, bias=False),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(8),
            nn.Conv2d(8, 4, 3, stride=2, padding=1, bias=False),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(4),
            nn.Flatten(),
            nn.Linear(64, 4),
            nn.ReLU(inplace=True),
        )

        self.decoder = nn.Sequential(
            nn.Linear(4, 64),
            nn.ELU(inplace=True),
            nn.Unflatten(1, (4, 4, 4)),
            nn.ConvTranspose2d(4, 8, 2, 2),
            nn.ELU(inplace=True),
            nn.ConvTranspose2d(8, 1, 2, 2),
        )

    def forward(self, x):
        h = self.encoder(x)
        return self.decoder(h), h


h = torch.rand(4)

model = AutoEncoder()
model.eval()
model.load_state_dict(st_model)

out = model.decoder(h.unsqueeze(0))
