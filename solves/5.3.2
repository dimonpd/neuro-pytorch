from PIL import Image
import torch
import torch.nn as nn
import torchvision.transforms as tfs
# import torchvision.transforms.v2 as tfs_v2 - недоступен на Stepik

# здесь объявляйте класс VAE_CNN
class VAE_CNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.hidden_dim = 7

        self.encoder = nn.Sequential(
            nn.Conv2d(3, 16, 3, padding=1),
            nn.ELU(inplace=True),
            nn.MaxPool2d(3, 2),
            nn.Conv2d(16, 4, 3, padding=1),
            nn.ELU(inplace=True),
            nn.MaxPool2d(3, 2),
            nn.Flatten()
        )

        self.h_mean = nn.Linear(36, self.hidden_dim)
        self.h_log_var = nn.Linear(36, self.hidden_dim)

        self.decoder = nn.Sequential(
            nn.Linear(self.hidden_dim, 32),
            nn.ReLU(inplace=True),
            nn.Unflatten(1, (2, 4, 4)),
            nn.ConvTranspose2d(2, 8, 2, 2),
            nn.ReLU(inplace=True),
            nn.ConvTranspose2d(8, 1, 2, 2),
            nn.Sigmoid()
        )

    def forward(self, x):
        enc = self.encoder(x)

        h_mean = self.h_mean(enc)
        h_log_var = self.h_log_var(enc)

        noise = torch.normal(mean=torch.zeros_like(h_mean), std=torch.ones_like(h_log_var))
        h = noise * torch.exp(h_log_var / 2) + h_mean
        x = self.decoder(h)

        return x, h_mean, h_log_var


img_pil = Image.new(mode="RGB", size=(64, 78), color=(0, 128, 255))
tr = tfs.Compose([tfs.CenterCrop(64), tfs.Resize(16), tfs.ToTensor()])
img = tr(img_pil)

model = VAE_CNN()
model.eval()

out, hm, hlv = model(img.unsqueeze(0))
