import torch
import torch.utils.data as data
import torch.nn as nn
import torch.optim as optim

model = nn.Sequential(
    nn.Linear(3, 1),
)

_x = torch.arange(-5, 5, 0.1)
data_y = torch.sin(2 * _x) + 0.2 * torch.cos(10 * _x) + 0.1 * _x ** 2

_x.unsqueeze_(-1)
data_x = torch.cat([_x, _x ** 2, _x ** 3], dim=1)
ds = data.TensorDataset(data_x, data_y)

batch_size = 8
train_data = data.DataLoader(ds, batch_size, shuffle=True)

epochs = 20 # число эпох обучения

optimizer = optim.RMSprop(params=model.parameters(), lr=0.01)
loss_func = torch.nn.MSELoss()

model.train()
for _e in range(epochs): # итерации по эпохам
    for x_train, y_train in train_data:
        predict = model(x_train)
        loss = loss_func(predict, y_train.unsqueeze(-1))

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

model.eval()
predict = model(data_x)
Q = loss_func(predict, data_y.unsqueeze(-1)).item()
